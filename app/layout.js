import { Poppins } from "next/font/google";
import "./globals.css";
import { DataProvider } from "@/context/DataContext";
import { Toaster } from "@/components/ui/sonner";

import AppInitializer from "./AppIntelizer";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import User from "@/model/userModel";
import connectToDatabase from "@/lib/db";
import { Knock } from "@knocklabs/node";
import Provider from "./context/Provider";

const poppins = Poppins({ subsets: ["latin"], weight: "400" });


export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
export default async function RootLayout({ children }) {
  async function getSession() {
    "use server";
    try {
      const session = await getServerSession(authOptions);
      const user = session?.user;
      return user;
    } catch (error) {
      return "Not authenticated";
    }
  }

  async function getUser() {
    "use server";
    try {
      await connectToDatabase();
      const { image } = await getSession();

      const user = await User.findById(image);

      // Exclude password from user object
      const { password, ...userWithoutPassword } = user.toObject();

      return JSON.parse(JSON.stringify(userWithoutPassword));
    } catch (error) {
      console.log(error);
      return [];
    }
  }

  async function getAllUsers() {
    "use server";
    try {
      await connectToDatabase();
      const allUsers = await User.find();

      return JSON.parse(JSON.stringify(allUsers));
    } catch (error) {
      return [];
    }
  }

  const session = await getSession();
  const user = await getUser();
  const allUsers = await getAllUsers();

  if (session && session.image) {
    const knockClient = new Knock(process.env.KNOCK_SECRET_API_KEY);
    const knockUser = await knockClient.users.identify(session.image, {
      name: session.name,
      email: session.email,
    });
  }
  return (
    <html lang="en">
      <body className={poppins.className}>
        {" "}
        <Toaster position="top-center" richColors />
        <AppInitializer session={session} user={user} allUsers={allUsers}>
          <Provider>{children}</Provider>
        </AppInitializer>
        
      </body>
    </html>
  );
}
